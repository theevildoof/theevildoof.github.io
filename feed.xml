<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://theevildoof.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://theevildoof.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-24T03:14:30+00:00</updated><id>https://theevildoof.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Open Source Smartwatch - Building Wearable Tech from Scratch</title><link href="https://theevildoof.github.io/blog/2023/open-source-smartwatch/" rel="alternate" type="text/html" title="Open Source Smartwatch - Building Wearable Tech from Scratch"/><published>2023-05-10T00:00:00+00:00</published><updated>2023-05-10T00:00:00+00:00</updated><id>https://theevildoof.github.io/blog/2023/open-source-smartwatch</id><content type="html" xml:base="https://theevildoof.github.io/blog/2023/open-source-smartwatch/"><![CDATA[<p>One of my most ambitious hardware projects has been developing an open-source smartwatch from scratch. This project aims to create a fully functional smartwatch with open-source firmware, making wearable technology more accessible to the maker community.</p> <h2 id="project-vision">Project Vision</h2> <p>The goal is to create a smartwatch that developers can modify, improve, and customize according to their needs. By open-sourcing the firmware and providing comprehensive documentation, I hope to enable others to build their own wearable devices.</p> <h2 id="current-status">Current Status</h2> <p>The project has successfully passed the prototyping phase and is now moving towards production-ready hardware design. Hereâ€™s whatâ€™s been accomplished:</p> <h3 id="-completed-features">âœ… Completed Features</h3> <ul> <li><strong>Basic Firmware</strong>: Core functionality implemented</li> <li><strong>Display System</strong>: OLED display integration</li> <li><strong>Sensor Integration</strong>: Heart rate, accelerometer, and gyroscope</li> <li><strong>Power Management</strong>: Battery optimization algorithms</li> <li><strong>Bluetooth Connectivity</strong>: Basic communication protocols</li> </ul> <h3 id="-next-steps">ðŸ”§ Next Steps</h3> <ul> <li><strong>PCB Design</strong>: Moving from breadboard to custom PCB</li> <li><strong>ESP-IDF Migration</strong>: Porting codebase to ESP-IDF platform</li> <li><strong>Case Design</strong>: 3D printable enclosure development</li> <li><strong>App Development</strong>: Companion mobile application</li> </ul> <h2 id="technical-architecture">Technical Architecture</h2> <ul> <li><strong>Microcontroller</strong>: ESP32-based system</li> <li><strong>Display</strong>: OLED screen with touch support</li> <li><strong>Sensors</strong>: MPU6050, MAX30102 heart rate sensor</li> <li><strong>Connectivity</strong>: Bluetooth LE for smartphone integration</li> <li><strong>Power</strong>: Lithium polymer battery with wireless charging</li> </ul> <h2 id="open-source-philosophy">Open Source Philosophy</h2> <p>This project embodies the spirit of open-source hardware development. All code, schematics, and documentation are freely available for the community to use, modify, and improve upon.</p> <p><a href="https://github.com/theevildoof/Smartwatch_From_Scratch">Check out the project on GitHub</a></p>]]></content><author><name></name></author><category term="projects"/><category term="IoT"/><category term="Hardware"/><category term="Smartwatch"/><category term="OpenSource"/><summary type="html"><![CDATA[Open sourcing the firmware of a smartwatch is the core idea behind this project. Currently in the prototyping phase with plans for PCB design and ESP-IDF porting.]]></summary></entry><entry><title type="html">3D Unity Game with MPU6050 and TinyML - A Complete Tutorial</title><link href="https://theevildoof.github.io/blog/2022/3d-unity-game-tinyml/" rel="alternate" type="text/html" title="3D Unity Game with MPU6050 and TinyML - A Complete Tutorial"/><published>2022-08-15T00:00:00+00:00</published><updated>2022-08-15T00:00:00+00:00</updated><id>https://theevildoof.github.io/blog/2022/3d-unity-game-tinyml</id><content type="html" xml:base="https://theevildoof.github.io/blog/2022/3d-unity-game-tinyml/"><![CDATA[<p>During my Google Summer of Code 2022 project with TensorFlow, I developed an exciting 3D Unity game that uses an MPU6050 accelerometer and TinyML for gesture-based controls. This project combines game development, embedded systems, and machine learning in a unique way.</p> <h2 id="what-youll-learn">What Youâ€™ll Learn</h2> <ul> <li>How to integrate hardware sensors with Unity games</li> <li>Implementation of TinyML models on microcontrollers</li> <li>Gesture recognition using accelerometer data</li> <li>Real-time communication between Arduino and Unity</li> </ul> <h2 id="key-features">Key Features</h2> <ul> <li><strong>Gesture-Based Controls</strong>: Use hand movements to control game characters</li> <li><strong>TinyML Integration</strong>: On-device machine learning for gesture recognition</li> <li><strong>Real-Time Response</strong>: Low-latency communication for smooth gameplay</li> <li><strong>Complete Tutorial</strong>: Step-by-step guide with code examples</li> </ul> <h2 id="technical-stack">Technical Stack</h2> <ul> <li><strong>Unity 3D</strong>: Game engine and development environment</li> <li><strong>Arduino</strong>: Hardware platform for sensor integration</li> <li><strong>TensorFlow Lite</strong>: Machine learning framework for embedded devices</li> <li><strong>MPU6050</strong>: 6-axis accelerometer and gyroscope sensor</li> </ul> <p>The project received over 27,000 views on Hackster.io and has become a popular tutorial for anyone interested in combining IoT, AI, and game development.</p> <p><a href="https://www.hackster.io/theevildoof/3d-unity-game-using-mpu6050-and-tinyml-tutorial-8e3076">Read the full tutorial on Hackster.io</a></p>]]></content><author><name></name></author><category term="projects"/><category term="TinyML"/><category term="Unity"/><category term="Arduino"/><category term="GSoC"/><summary type="html"><![CDATA[Ever wanted to build your own Unity game using an accelerometer for control with a sprinkle of AI? Here's how I did it during Google Summer of Code 2022!]]></summary></entry><entry><title type="html">In-depth - TensorFlow Lite for Microcontrollers Part 2</title><link href="https://theevildoof.github.io/blog/2022/in-depth-tensorflow-lite-part-2/" rel="alternate" type="text/html" title="In-depth - TensorFlow Lite for Microcontrollers Part 2"/><published>2022-08-10T16:40:00+00:00</published><updated>2022-08-10T16:40:00+00:00</updated><id>https://theevildoof.github.io/blog/2022/in-depth-tensorflow-lite-part-2</id><content type="html" xml:base="https://theevildoof.github.io/blog/2022/in-depth-tensorflow-lite-part-2/"><![CDATA[<p>A detailed exploration of the inner workings of TensorFlow Lite for Microcontrollers, focusing on the role of FlatBuffers in model serialization and interpretation. Learn about neural network model representation and microcontroller-specific implementation challenges.</p> <p><a href="https://www.hackster.io/theevildoof/in-depth-tensorflow-lite-for-microcontrollers-part-2-f0d170">Read Tutorial â†’</a></p>]]></content><author><name></name></author><category term="projects"/><category term="tensorflow-lite"/><category term="tinyml"/><category term="flatbuffers"/><category term="serialization"/><category term="embedded-systems"/><summary type="html"><![CDATA[A detailed exploration focusing on FlatBuffers serialization, model schema, and microcontroller-specific implementation challenges in TensorFlow Lite.]]></summary></entry><entry><title type="html">In-depth - TensorFlow Lite for Microcontrollers Part 1</title><link href="https://theevildoof.github.io/blog/2022/in-depth-tensorflow-lite-part-1/" rel="alternate" type="text/html" title="In-depth - TensorFlow Lite for Microcontrollers Part 1"/><published>2022-08-09T16:40:00+00:00</published><updated>2022-08-09T16:40:00+00:00</updated><id>https://theevildoof.github.io/blog/2022/in-depth-tensorflow-lite-part-1</id><content type="html" xml:base="https://theevildoof.github.io/blog/2022/in-depth-tensorflow-lite-part-1/"><![CDATA[<p>An exploration of the inner workings of TensorFlow Lite for Microcontrollers, detailing its design requirements, code generation approach, and project generation strategies for embedded systems. Understand what happens under the hood of this lightweight ML framework.</p> <p><a href="https://www.hackster.io/theevildoof/in-depth-tensorflow-lite-for-microcontrollers-part-1-0ab9ae">Read Tutorial â†’</a></p>]]></content><author><name></name></author><category term="projects"/><category term="tensorflow-lite"/><category term="tinyml"/><category term="embedded-systems"/><category term="design"/><category term="architecture"/><summary type="html"><![CDATA[An exploration of the inner workings of TensorFlow Lite for Microcontrollers, detailing its design requirements and code generation approach for embedded systems.]]></summary></entry><entry><title type="html">Troubleshooting TinyML Applications 101</title><link href="https://theevildoof.github.io/blog/2022/troubleshooting-tinyml-applications/" rel="alternate" type="text/html" title="Troubleshooting TinyML Applications 101"/><published>2022-07-29T16:40:00+00:00</published><updated>2022-07-29T16:40:00+00:00</updated><id>https://theevildoof.github.io/blog/2022/troubleshooting-tinyml-applications</id><content type="html" xml:base="https://theevildoof.github.io/blog/2022/troubleshooting-tinyml-applications/"><![CDATA[<p>A comprehensive guide to debugging TensorFlow Lite for Microcontrollers applications, covering common errors and their solutions. Learn to resolve pointer-related errors, tensor arena issues, model setup problems, and other TinyML development challenges.</p> <p><a href="https://www.hackster.io/theevildoof/troubleshooting-tinyml-applications-101-528259">Read Tutorial â†’</a></p>]]></content><author><name></name></author><category term="projects"/><category term="tensorflow-lite"/><category term="tinyml"/><category term="debugging"/><category term="troubleshooting"/><category term="esp32"/><summary type="html"><![CDATA[A comprehensive guide to debugging TensorFlow Lite for Microcontrollers applications, covering common errors and their solutions.]]></summary></entry><entry><title type="html">TinyML Image Recognition with OV7670 Camera Module</title><link href="https://theevildoof.github.io/blog/2022/tinyml-image-recognition-ov7670/" rel="alternate" type="text/html" title="TinyML Image Recognition with OV7670 Camera Module"/><published>2022-07-20T00:00:00+00:00</published><updated>2022-07-20T00:00:00+00:00</updated><id>https://theevildoof.github.io/blog/2022/tinyml-image-recognition-ov7670</id><content type="html" xml:base="https://theevildoof.github.io/blog/2022/tinyml-image-recognition-ov7670/"><![CDATA[<p>As part of my Google Summer of Code 2022 project, I created a comprehensive tutorial on building TinyML image recognition systems using the OV7670 camera module. This project demonstrates how to implement computer vision on resource-constrained devices.</p> <h2 id="project-overview">Project Overview</h2> <p>This tutorial guides you through building a complete TinyML image recognition system that can run on microcontrollers with minimal power consumption. Perfect for IoT applications where cloud connectivity isnâ€™t available or practical.</p> <h2 id="what-youll-build">What Youâ€™ll Build</h2> <ul> <li><strong>Real-time Image Capture</strong>: Using OV7670 camera module</li> <li><strong>On-device ML Inference</strong>: TensorFlow Lite models running on Arduino</li> <li><strong>Low Power Operation</strong>: Optimized for battery-powered applications</li> <li><strong>Portable System</strong>: Compact design suitable for embedded applications</li> </ul> <h2 id="key-components">Key Components</h2> <ul> <li><strong>OV7670 Camera Module</strong>: Low-cost VGA camera sensor</li> <li><strong>Arduino Nano 33 BLE Sense</strong>: Microcontroller with built-in ML capabilities</li> <li><strong>TensorFlow Lite Micro</strong>: Optimized ML framework for microcontrollers</li> <li><strong>Edge Impulse</strong>: Platform for training and deploying ML models</li> </ul> <h2 id="technical-highlights">Technical Highlights</h2> <ul> <li>Image preprocessing and optimization techniques</li> <li>Model quantization for efficient inference</li> <li>Memory management strategies for constrained devices</li> <li>Real-time performance optimization</li> </ul> <p>This project has been incredibly popular in the maker community, helping thousands of developers get started with TinyML and embedded computer vision.</p> <p><a href="https://www.hackster.io/theevildoof/tutorial-tinyml-with-ov7670-camera-module-302e35">Read the complete tutorial on Hackster.io</a></p>]]></content><author><name></name></author><category term="projects"/><category term="TinyML"/><category term="ComputerVision"/><category term="Arduino"/><category term="GSoC"/><summary type="html"><![CDATA[Want to build your own TinyML image recognition application? This comprehensive guide covers everything you need to get started with embedded computer vision.]]></summary></entry><entry><title type="html">Tutorial Part-4 - TinyML with OV7670 Camera module!</title><link href="https://theevildoof.github.io/blog/2022/tinyml-ov7670-part-4/" rel="alternate" type="text/html" title="Tutorial Part-4 - TinyML with OV7670 Camera module!"/><published>2022-07-18T16:40:00+00:00</published><updated>2022-07-18T16:40:00+00:00</updated><id>https://theevildoof.github.io/blog/2022/tinyml-ov7670-part-4</id><content type="html" xml:base="https://theevildoof.github.io/blog/2022/tinyml-ov7670-part-4/"><![CDATA[<p>Want to build your own TinyML image recognition application? This is the fourth part of the comprehensive tutorial series covering the final implementation details of TinyML with the OV7670 camera module.</p> <p><a href="https://www.hackster.io/theevildoof/tutorial-part-4-tinyml-with-ov7670-camera-module-4b4c0f">Read Tutorial â†’</a></p>]]></content><author><name></name></author><category term="projects"/><category term="tinyml"/><category term="ov7670"/><category term="camera"/><category term="machine-learning"/><category term="embedded-systems"/><summary type="html"><![CDATA[Want to build your own TinyML image recognition application? This is the fourth part of the comprehensive tutorial series.]]></summary></entry><entry><title type="html">Tutorial Part-3 - TinyML with OV7670 Camera module!</title><link href="https://theevildoof.github.io/blog/2022/tinyml-ov7670-part-3/" rel="alternate" type="text/html" title="Tutorial Part-3 - TinyML with OV7670 Camera module!"/><published>2022-07-17T16:40:00+00:00</published><updated>2022-07-17T16:40:00+00:00</updated><id>https://theevildoof.github.io/blog/2022/tinyml-ov7670-part-3</id><content type="html" xml:base="https://theevildoof.github.io/blog/2022/tinyml-ov7670-part-3/"><![CDATA[<p>Want to build your own TinyML image recognition application? This is the third part of the comprehensive tutorial series diving deeper into TinyML implementation techniques with the OV7670 camera module.</p> <p><a href="https://www.hackster.io/theevildoof/tutorial-part-3-tinyml-with-ov7670-camera-module-f159c0">Read Tutorial â†’</a></p>]]></content><author><name></name></author><category term="projects"/><category term="tinyml"/><category term="ov7670"/><category term="camera"/><category term="machine-learning"/><category term="embedded-systems"/><summary type="html"><![CDATA[Want to build your own TinyML image recognition application? This is the third part of the comprehensive tutorial series.]]></summary></entry><entry><title type="html">Tutorial Part-2 - TinyML with OV7670 Camera module!</title><link href="https://theevildoof.github.io/blog/2022/tinyml-ov7670-part-2/" rel="alternate" type="text/html" title="Tutorial Part-2 - TinyML with OV7670 Camera module!"/><published>2022-07-16T16:40:00+00:00</published><updated>2022-07-16T16:40:00+00:00</updated><id>https://theevildoof.github.io/blog/2022/tinyml-ov7670-part-2</id><content type="html" xml:base="https://theevildoof.github.io/blog/2022/tinyml-ov7670-part-2/"><![CDATA[<p>Want to build your own TinyML image recognition application? This is the second part of the comprehensive tutorial series covering advanced aspects of TinyML implementation with the OV7670 camera module.</p> <p><a href="https://www.hackster.io/theevildoof/tutorial-part-2-tinyml-with-ov7670-camera-module-f487a7">Read Tutorial â†’</a></p>]]></content><author><name></name></author><category term="projects"/><category term="tinyml"/><category term="ov7670"/><category term="camera"/><category term="machine-learning"/><category term="embedded-systems"/><summary type="html"><![CDATA[Want to build your own TinyML image recognition application? This is the second part of the comprehensive tutorial series.]]></summary></entry><entry><title type="html">Tutorial Part-1 - TinyML with OV7670 Camera module!</title><link href="https://theevildoof.github.io/blog/2022/tinyml-ov7670-part-1/" rel="alternate" type="text/html" title="Tutorial Part-1 - TinyML with OV7670 Camera module!"/><published>2022-07-15T16:40:00+00:00</published><updated>2022-07-15T16:40:00+00:00</updated><id>https://theevildoof.github.io/blog/2022/tinyml-ov7670-part-1</id><content type="html" xml:base="https://theevildoof.github.io/blog/2022/tinyml-ov7670-part-1/"><![CDATA[<p>Want to build your own TinyML image recognition application? This is the first part of a comprehensive tutorial series that walks you through building TinyML applications with the OV7670 camera module from the ground up.</p> <p><a href="https://www.hackster.io/theevildoof/tutorial-part-1-tinyml-with-ov7670-camera-module-1a99e2">Read Tutorial â†’</a></p>]]></content><author><name></name></author><category term="projects"/><category term="tinyml"/><category term="ov7670"/><category term="camera"/><category term="machine-learning"/><category term="embedded-systems"/><summary type="html"><![CDATA[Want to build your own TinyML image recognition application? This is the first part of a comprehensive tutorial series.]]></summary></entry></feed>